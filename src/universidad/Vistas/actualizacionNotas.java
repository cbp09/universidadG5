/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package universidad.Vistas;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import universidad.AccesoADatos.AlumnoData;
import universidad.AccesoADatos.InscripcionData;
import universidad.Entidades.Alumno;
import universidad.Entidades.Inscripcion;
import universidad.Entidades.Materia;

/**
 *
 * @author luuci
 */
public class actualizacionNotas extends javax.swing.JInternalFrame {
    
    AlumnoData alumnoData = new AlumnoData();
    private InscripcionData inscripcionData = new InscripcionData();
    
    private DefaultTableModel modelo = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int f, int c) {  // para que la tabla no sea editable
        return false;
        }
    };
 
    public actualizacionNotas() {
        initComponents();
        cargarCombo();
        armarCabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcbAlumnoCN = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtNotas = new javax.swing.JTable();
        jbGuardarNotas = new javax.swing.JButton();
        jbSalirDeNotas = new javax.swing.JButton();

        setClosable(true);

        jLabel1.setText("CARGA DE NOTAS");

        jLabel2.setText("SELECCIONE ALUMNO:");

        jcbAlumnoCN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnoCNActionPerformed(evt);
            }
        });

        jtNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtNotas);

        jbGuardarNotas.setText("GUARDAR");

        jbSalirDeNotas.setText("SALIR");
        jbSalirDeNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirDeNotasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jcbAlumnoCN, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jbGuardarNotas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalirDeNotas)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbAlumnoCN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbGuardarNotas)
                    .addComponent(jbSalirDeNotas))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirDeNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirDeNotasActionPerformed
        // ACCION DE SALIR DE VENTANA
        dispose();
    }//GEN-LAST:event_jbSalirDeNotasActionPerformed

    private void jcbAlumnoCNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnoCNActionPerformed
        // Actualizo los datos
        
        Alumno alumnoSeleccionado = (Alumno) jcbAlumnoCN.getSelectedItem();
        
        List<Inscripcion> inscripciones = inscripcionData.obtenerInscripcionPorAlumno(alumnoSeleccionado.getIdAlumno() );
        
        borrarFilasTabla();
        
        cargarDatosTabla(inscripciones);
        
    }//GEN-LAST:event_jcbAlumnoCNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGuardarNotas;
    private javax.swing.JButton jbSalirDeNotas;
    private javax.swing.JComboBox<Alumno> jcbAlumnoCN;
    private javax.swing.JTable jtNotas;
    // End of variables declaration//GEN-END:variables
    
    private void cargarCombo() {
        for (Alumno alumno : alumnoData.listarAlumnos()) {
            jcbAlumnoCN.addItem(alumno);
        }
    }
    
    private void armarCabecera() {
        //de la tabla
        modelo.addColumn("Codigo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Nota");
        jtNotas.setModel(modelo);
    }
    
    private void cargarDatosTabla(List<Inscripcion> inscripcion) {
        //de la tabla
        for (Inscripcion inscrip : inscripcion) {
            modelo.addRow(new Object[]{ inscrip.getMateria().getIdMateria(), inscrip.getMateria().getNombre(), inscrip.getNota() });
        }
    }

    private void borrarFilasTabla() {
        //para borrar las filas cada vez que selecciono un alumno diferente, elijo mostrar materias cursadas o no cursadas
        try {
            int filas = jtNotas.getRowCount() - 1;
            for (; filas >= 0; filas--) {
                modelo.removeRow(filas);
            }
        } catch (Exception e) {
        }
    }
}
